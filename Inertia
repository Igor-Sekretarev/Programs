from collections import deque
from itertools import product

GEM, ICE, MINE, ROUGH, ROCK = '$ *.X'

GRADIENTS = {
    'NW': (-1, -1), 'N': (-1, 0), 'NE': (-1, 1),
     'W': ( 0, -1),                'E': ( 0, 1),
    'SW': ( 1, -1), 'S': ( 1, 0), 'SE': ( 1, 1)
}

def inertia(grid, start):
    n, m = len(grid), len(grid[0])
    moves = {}
    dead_ends = set()

    for (x0,y0) in product(range(n), range(m)):
        if grid[x0][y0] not in (MINE, ROCK):
            moves[x0,y0] = {}
            for direction, (dx,dy) in GRADIENTS.items():
                trace = []
                (x,y) = (x0+dx,y0+dy)
                while 0 <= x < n and 0 <= y < m:
                    if grid[x][y] == MINE:
                        trace = []
                        break
                    if grid[x][y] == ROCK:
                        break
                    trace.append((x,y))
                    if grid[x][y] == ROUGH:
                        break
                    (x,y) = (x+dx,y+dy)
                if trace:
                    moves[x0,y0][direction] = trace
            if not moves[x0,y0]:
                dead_ends.add((x0,y0))

    route = []
    gems = {(x,y) for x in range(n) for y in range(m) if grid[x][y] == GEM}

    while gems:
        visited = set()
        nothing_collected = True
        queue = deque([(start,[])])
        while nothing_collected and queue:
            cell, path = queue.popleft()
            visited.add(cell)
            for direction, trace in moves[cell].items():
                next_stop = trace[-1]
                if next_stop not in dead_ends:
                    trace = set(trace)
                    if gems & trace:
                        gems -= trace
                        route += path + [direction]
                        nothing_collected = False
                        start = next_stop
                        break
                    if next_stop not in visited:
                        queue.append((next_stop, path+[direction]))

    return route



print(inertia([
    "..$XX$X$$.",
    "**..X*..X.",
    "*X$* .$..$",
    "$* . X$$**",
    "X$ .. X*.X",
    " X  $XX***",
    "*X$$.$*. *",
    "*$ X     X"], (2,5)))
