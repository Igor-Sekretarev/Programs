"""
You are given an array of 2n elements:
[A1,A2,...,An,B1,B2,...,Bn]

You have to interleave the array, using an in-place algorithm,
so that the resulting array looks like:
[A1,B1,A2,B2,...,An,Bn]

O(n) time complexity
O(1) space complexity
"""


from typing import List


def reverse_subarray(array: List[int], start: int, end: int) -> None:
    """
    In-place equivalent to:

    array[start : end+1] = array[end : start-1 : -1]
    """
    while start < end:
        array[start], array[end] = array[end], array[start]
        start += 1
        end -= 1


def rotate_subarray_by_k_steps(
    array: List[int], start: int, end: int, k: int
) -> None:
    """
    In-place equivalent to:

    array[start : end+1] = array[end-k+1 : end+1] + array[start : end-k+1]
    """
    reverse_subarray(array, start, end)
    reverse_subarray(array, start, start+k-1)
    reverse_subarray(array, start+k, end)


def in_shuffle(array: List[int]) -> None:
    """
    O(n) time complexity
    O(1) space complexity
    """
    start = 0
    n = (len(array) - start) // 2
    while n > 1:
        k = 1
        while 3**(k+1) <= 2*n-1:
            k += 1
        m = (3**k+1) // 2
        rotate_subarray_by_k_steps(array, start+m, start+n+m-1, m)
        for x in range(k):
            i = 3**x
            j = 2*i % (2*m-1)
            while i != j:
                array[start+i], array[start+j] = array[start+j], array[start+i]
                j = 2*j % (2*m-1)
        start += 2*m
        n = (len(array) - start) // 2
    print("in_shuffle() is done.")


def in_shuffle2(array: List[int]) -> None:
    """
    O(n^2) time complexity
    O(1) space complexity
    """
    n = len(array) // 2
    for i in range(n, 2*n):
        for j in reversed(range(2*i-2*n+1, i)):
            array[j], array[j+1] = array[j+1], array[j]
    print("in_shuffle2() is done.")


A = list(range(10000))
B = list(range(10000))

print('A:\t[', *A[:15], '... ]')
print('B:\t[', *B[:15], '... ]\n')

in_shuffle(A)
in_shuffle2(B)

print('\nA == B:\t', A == B, '\n')
print('A:\t[', *A[:15], '... ]')
print('B:\t[', *B[:15], '... ]')
